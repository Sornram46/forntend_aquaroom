import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';

export async function POST(request: NextRequest) {
  try {
    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON
    const body = await request.json();
    const { 
      addressId, 
      paymentMethod, 
      subtotal, 
      shippingFee, 
      discount, 
      couponCode, 
      totalAmount, 
      cartItems,
      paymentProofUrl,
      couponId,           // ‡πÄ‡∏û‡∏¥‡πà‡∏° coupon_id
      couponDiscount      // ‡πÄ‡∏û‡∏¥‡πà‡∏° coupon_discount
    } = body;

    const token = request.headers.get('authorization')?.split(' ')[1];
    
    if (!token) {
      return NextResponse.json(
        { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô' },
        { status: 401 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret') as {
      userId: string;
    };
    
    console.log('üì¶ Creating order via backend API...');
    console.log('Received cart items:', cartItems);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cartItems ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Backend requirements
    let processedItems;
    try {
      const items = typeof cartItems === 'string' ? JSON.parse(cartItems) : cartItems;
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Backend
      processedItems = items.map((item: any) => ({
        product_id: item.id,           
        quantity: parseInt(item.quantity) || 1,
        price: parseFloat(item.price) || 0,
        total: (parseFloat(item.price) || 0) * (parseInt(item.quantity) || 1)
      }));
      
      console.log('üì§ Processed items for backend:', processedItems);
      
    } catch (parseError) {
      console.error('‚ùå Error parsing cart items:', parseError);
      return NextResponse.json(
        { success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å item ‡∏°‡∏µ product_id
    const invalidItems = processedItems.filter((item: any) => !item.product_id);
    if (invalidItems.length > 0) {
      console.error('‚ùå Items without product_id:', invalidItems);
      return NextResponse.json(
        { success: false, message: '‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ ID ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' },
        { status: 400 }
      );
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö orders schema
    const orderData = {
      user_id: parseInt(decoded.userId),
      address_id: parseInt(addressId),
      total_amount: parseFloat(totalAmount),
      subtotal: parseFloat(subtotal),
      shipping_fee: parseFloat(shippingFee) || 0,
      discount: parseFloat(discount) || 0,
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
      coupon_id: couponId ? parseInt(couponId) : null,
      coupon_code: couponCode || null,
      coupon_discount: couponDiscount ? parseFloat(couponDiscount) : null,
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      payment_method: paymentMethod,
      payment_status: 'pending',
      order_status: 'processing',
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      items: processedItems,
      
      // ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      payment_proof_url: paymentProofUrl || null,
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      status: 'pending', // for backward compatibility
      notes: null
    };
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Backend API
    const backendUrl = process.env.BACKEND_URL || 'http://localhost:5000';
    
    console.log('üîó Calling backend API:', `${backendUrl}/api/orders`);
    console.log('üì§ Sending data:', orderData);

    const response = await fetch(`${backendUrl}/api/orders`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(orderData)
    });

    console.log('üìä Response status:', response.status);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type ‡∏Å‡πà‡∏≠‡∏ô parse JSON
    const contentType = response.headers.get('content-type');
    
    if (!contentType || !contentType.includes('application/json')) {
      const textResponse = await response.text();
      console.error('‚ùå Backend returned non-JSON response:', textResponse);
      
      return NextResponse.json(
        { success: false, message: 'Backend API ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON)' },
        { status: 502 }
      );
    }

    const backendData = await response.json();
    console.log('üì• Backend response:', backendData);

    if (!response.ok) {
      return NextResponse.json(
        { success: false, message: backendData.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' },
        { status: response.status }
      );
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏ó‡∏µ‡πà‡∏°‡∏µ orderNumber ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    const orderResponse = {
      success: true,
      order: {
        ...backendData.order || backendData,
        orderNumber: backendData.order?.order_number || 
                    backendData.order?.orderNumber || 
                    backendData.order_number || 
                    backendData.orderNumber ||
                    `ORD${Date.now()}` // fallback
      }
    };

    console.log('üì§ Sending response to frontend:', orderResponse);

    return NextResponse.json(orderResponse, { status: 201 });
    
  } catch (error) {
    console.error('‚ùå Error creating order:', error);
    return NextResponse.json(
      { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' },
      { status: 500 }
    );
  }
}

// GET method ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°...
export async function GET(request: NextRequest) {
  try {
    const token = request.headers.get('authorization')?.split(' ')[1];
    
    if (!token) {
      return NextResponse.json(
        { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô' },
        { status: 401 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret') as {
      userId: string;
    };
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Backend API ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ query ‡∏ï‡∏£‡∏á
    const backendUrl = process.env.BACKEND_URL || 'http://localhost:5000';
    console.log('üìã Fetching orders from backend for user:', decoded.userId);
    
    const response = await fetch(`${backendUrl}/api/orders?user_id=${decoded.userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Bearer ${token}`,
      }
    });

    const contentType = response.headers.get('content-type');
    
    if (!response.ok) {
      if (contentType && contentType.includes('application/json')) {
        const errorData = await response.json();
        return NextResponse.json(
          { success: false, message: errorData.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' },
          { status: response.status }
        );
      } else {
        const textResponse = await response.text();
        console.error('‚ùå Backend returned non-JSON error response:', textResponse);
        return NextResponse.json(
          { success: false, message: 'Backend API ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á' },
          { status: 502 }
        );
      }
    }

    if (!contentType || !contentType.includes('application/json')) {
      const textResponse = await response.text();
      console.error('‚ùå Backend returned non-JSON response for GET:', textResponse);
      return NextResponse.json(
        { success: false, message: 'Backend API ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON)' },
        { status: 502 }
      );
    }

    const backendData = await response.json();
    
    return NextResponse.json({
      success: true,
      orders: backendData.orders || backendData.data || []
    });
    
  } catch (error) {
    console.error('‚ùå Error fetching orders:', error);
    return NextResponse.json(
      { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' },
      { status: 500 }
    );
  }
}