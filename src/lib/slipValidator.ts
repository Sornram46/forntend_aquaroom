import Tesseract from 'tesseract.js';

export interface SlipValidationResult {
  isValid: boolean;
  message: string;
  confidence: number;
  detectedText?: string;
  foundKeywords?: string[];
}

export const validateSlipWithOCR = async (file: File): Promise<SlipValidationResult> => {
  try {
    console.log('üîç Starting OCR validation for slip...');
    
    // ‡πÉ‡∏ä‡πâ Tesseract.js ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const result = await Tesseract.recognize(file, 'tha+eng', {
      logger: m => {
        if (m.status === 'recognizing text') {
          console.log(`üìñ OCR Progress: ${Math.round(m.progress * 100)}%`);
        }
      }
    });
    
    const detectedText = result.data.text.toLowerCase();
    console.log('üìÑ Detected text:', detectedText.substring(0, 200));
    
    // ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    const bankKeywords = [
      // ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', '‡πÇ‡∏≠‡∏ô', 'transfer', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 'amount',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', 'bank', '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', 'account', '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
      '‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô', 'balance', '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'successful', 'complete',
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'date', '‡πÄ‡∏ß‡∏•‡∏≤', 'time', 'ref', 'reference',
      'atm', 'mobile banking', 'internet banking',
      '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢', 'kasikorn', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', 'bangkok bank',
      '‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå', 'scb', '‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢', 'ktb', 'tmb',
      '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', 'gsb', '‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô',
      'baht', '‡∏ö‡∏≤‡∏ó', 'thb'
    ];
    
    // ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const foundKeywords = bankKeywords.filter(keyword => {
      const regex = new RegExp(keyword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i');
      return regex.test(detectedText);
    });
    
    console.log('üîç Found keywords:', foundKeywords);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10-12 ‡∏´‡∏•‡∏±‡∏Å)
    const accountNumberPattern = /\b\d{10,12}\b/g;
    const accountNumbers = detectedText.match(accountNumberPattern) || [];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    const amountPattern = /(?:\d{1,3}(?:,\d{3})*|\d+)(?:\.\d{2})?\s*(?:‡∏ö‡∏≤‡∏ó|baht|thb)/gi;
    const amounts = detectedText.match(amountPattern) || [];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤
    const dateTimePattern = /\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{2,4}|\d{1,2}:\d{2}/g;
    const dateTime = detectedText.match(dateTimePattern) || [];
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
    let confidence = 0;
    confidence += Math.min(foundKeywords.length * 15, 60); // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 60 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    confidence += Math.min(accountNumbers.length * 10, 20); // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    confidence += Math.min(amounts.length * 10, 10); // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    confidence += Math.min(dateTime.length * 5, 10); // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    
    const isValid = confidence >= 40; // ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 40%
    
    console.log(`‚úÖ Validation result: ${isValid ? 'VALID' : 'INVALID'} (${confidence}%)`);
    
    return {
      isValid,
      confidence,
      message: isValid 
        ? `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ${confidence}%)`
        : `‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ${confidence}%) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
      detectedText: detectedText.substring(0, 300),
      foundKeywords
    };
    
  } catch (error) {
    console.error('‚ùå Error in OCR validation:', error);
    return {
      isValid: true, // ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      confidence: 0,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠',
      detectedText: ''
    };
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ OCR)
export const validateSlipQuick = (file: File): SlipValidationResult => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
  const fileName = file.name.toLowerCase();
  const suspiciousNames = ['screenshot', 'img', 'photo', 'pic'];
  const goodNames = ['slip', 'transfer', 'payment', 'bank'];
  
  let confidence = 50; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 50%
  
  if (suspiciousNames.some(name => fileName.includes(name))) {
    confidence -= 20;
  }
  
  if (goodNames.some(name => fileName.includes(name))) {
    confidence += 30;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏™‡∏•‡∏¥‡∏õ‡∏°‡∏±‡∏Å‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å)
  if (file.size > 2 * 1024 * 1024) { // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2MB
    confidence -= 10;
  }
  
  const isValid = confidence >= 40;
  
  return {
    isValid,
    confidence,
    message: isValid 
      ? `‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (${confidence}%)`
      : `‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (${confidence}%)`
  };
};